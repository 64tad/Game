package com.tommysource.unitcircle;

import java.applet.Applet;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;

public class Screen extends Applet implements MouseMotionListener
{
	private static final long serialVersionUID = 8230319047386007282L;

	int width, height;
	Point mouse = new Point(0,0);

	Stroke stroke = new BasicStroke(5);
	Font defualt = new Font("Ariel", Font.BOLD, 10);
	ArrayList<Integer> angles = new ArrayList<Integer>();

	public void init()
	{
		setSize(800,600);
		height = this.getHeight();
		width = this.getWidth();
		System.out.println("Width: " + width + " Height: " + height);

		//Add angle values to arraylist
		angles.add(0);
		angles.add(30);
		angles.add(45);
		angles.add(60);
		angles.add(90);
		angles.add(120);
		angles.add(135);
		angles.add(150);
		angles.add(180);
		angles.add(210);
		angles.add(225);
		angles.add(240);
		angles.add(270);
		angles.add(300);
		angles.add(315);
		angles.add(330);

		this.addMouseMotionListener(this);
	}

	public void paint(Graphics g)
	{
		setSize(800,600);
		Graphics2D b = (Graphics2D) g;
		//Draw Center Lines
		b.setFont(defualt);
		b.setStroke(new BasicStroke(3));
		//b.drawLine(width/2, 0, width/2, height);
		//b.drawLine(0, height/2, width, height/2);

		//Draw Circle
		drawCircle(width/2, height/2, 200, b);

		checkToolTips(b, width/2, height/2, 200);
	}
	//Draws The Unit Circle With All The Angles In Place
	void drawCircle(int x, int y, int r, Graphics2D b)
	{
		b.setStroke(new BasicStroke(5));
		b.drawOval(x - r, y - r, r*2, r*2);
		b.setStroke(new BasicStroke(3));

		for (Integer i : angles)
			drawAngledLine(width/2, height/2, r, i, b);
	}

	void drawAngledLine(int x, int y, int r, int angle, Graphics2D b)
	{
		b.drawLine(x, y,  x + (int)(r * Math.cos(Math.toRadians(angle))), y - (int)(r * Math.sin(Math.toRadians(angle))));
	}

	void checkToolTips(Graphics2D b, int x, int y, int r)
	{

		int testX, testY;

		for (Integer i : angles)
		{
			testX = x + (int)(r * Math.cos(Math.toRadians(i)));
			testY = y - (int)(r * Math.sin(Math.toRadians(i)));

			if (mouse.y > testY - 10 && mouse.y < testY + 10)
			{
				if (mouse.x > testX - 10 && mouse.x < testX + 10)
					drawToolTip(b, i);

			}
			//b.drawRect(testX - 10, testY - 10, 20, 20);
		}
	}

	void drawToolTip(Graphics2D b, int angle)
	{
		b.setColor(Color.LIGHT_GRAY);
		b.fillRoundRect(mouse.x, mouse.y, 100, 60, 10, 10);
		b.setColor(Color.darkGray);
		b.drawRoundRect(mouse.x, mouse.y, 100, 60, 10, 10);

		b.setColor(Color.black);

		switch(angle)
		{
		case (0):
			b.drawString("0", mouse.x + 50 - b.getFontMetrics().stringWidth("0")/2, mouse.y + 20);
		b.drawString("1,0", mouse.x + 50 - b.getFontMetrics().stringWidth("1,0")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (45):
			b.drawString("π/4", mouse.x + 50 - b.getFontMetrics().stringWidth("π/4")/2, mouse.y + 20);
		b.drawString("(√2/2),(√2/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(√2/2),(√2/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;

		case (30):
			b.drawString("π/6", mouse.x + 50 - b.getFontMetrics().stringWidth("π/6")/2, mouse.y + 20);
		b.drawString("(√3/2),(1/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(√3/2),(1/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (60):
			b.drawString("π/3", mouse.x + 50 - b.getFontMetrics().stringWidth("π/3")/2, mouse.y + 20);
		b.drawString("(1/2),(√3/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(1/2),(√3/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (90):
			b.drawString("π/2", mouse.x + 50 - b.getFontMetrics().stringWidth("π/2")/2, mouse.y + 20);
		b.drawString("0,1", mouse.x + 50 - b.getFontMetrics().stringWidth("0,1")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (120):
			b.drawString("2π/3", mouse.x + 50 - b.getFontMetrics().stringWidth("2π/3")/2, mouse.y + 20);
		b.drawString("(-1/2),(√3/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(-1/2),(√3/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (135):
			b.drawString("3π/4", mouse.x + 50 - b.getFontMetrics().stringWidth("3π/4")/2, mouse.y + 20);
		b.drawString("(-√2/2),(√2/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(-√2/2),(√2/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (150):
			b.drawString("5π/6", mouse.x + 50 - b.getFontMetrics().stringWidth("5π/6")/2, mouse.y + 20);
		b.drawString("(-√3/2),(1/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(-√3/2),(1/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (180):
			b.drawString("π", mouse.x + 50 - b.getFontMetrics().stringWidth("π")/2, mouse.y + 20);
		b.drawString("-1,0", mouse.x + 50 - b.getFontMetrics().stringWidth("-1,0")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (210):
			b.drawString("7π/6", mouse.x + 50 - b.getFontMetrics().stringWidth("7π/6")/2, mouse.y + 20);
		b.drawString("(-√3/2),(-1/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(-√3/2),(-1/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (225):
			b.drawString("5π/4", mouse.x + 50 - b.getFontMetrics().stringWidth("5π/4")/2, mouse.y + 20);
		b.drawString("(-√2/2),(-√2/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(-√2/2),(-√2/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (240):
			b.drawString("4π/3", mouse.x + 50 - b.getFontMetrics().stringWidth("4π/3")/2, mouse.y + 20);
		b.drawString("(-1/2),(-√3/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(-√3/2),(1/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (270):
			b.drawString("3π/2", mouse.x + 50 - b.getFontMetrics().stringWidth("3π/2")/2, mouse.y + 20);
		b.drawString("0,-1", mouse.x + 50 - b.getFontMetrics().stringWidth("0,-1")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;

		case (300):
			b.drawString("5π/3", mouse.x + 50 - b.getFontMetrics().stringWidth("5π/3")/2, mouse.y + 20);
		b.drawString("(1/2),(-√3/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(1/2),(-√3/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (315):
			b.drawString("7π/4", mouse.x + 50 - b.getFontMetrics().stringWidth("7π/4")/2, mouse.y + 20);
		b.drawString("(√2/2),(-√2/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(√2/2),(-√2/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		
		case (330):
			b.drawString("11π/6", mouse.x + 50 - b.getFontMetrics().stringWidth("11π/6")/2, mouse.y + 20);
		b.drawString("(√3/2),(-1/2)", mouse.x + 50 - b.getFontMetrics().stringWidth("(√3/2),(-1/2)")/2, mouse.y + 35);
		b.drawString(angle + "°", mouse.x + 50 - b.getFontMetrics().stringWidth(angle + "°")/2, mouse.y + 52);
		break;
		}
	}

	public void mouseDragged(MouseEvent e) 
	{
		mouse.x = e.getX();
		mouse.y = e.getY();
		repaint();
	}
	public void mouseMoved(MouseEvent e) 
	{
		mouse.x = e.getX();
		mouse.y = e.getY();
		repaint();
	}

}
